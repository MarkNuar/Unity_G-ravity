using UnityEngine;

// This class preprocess the noise generated by the noise class
namespace CBodies.Noise
{
    public class SimpleNoiseFilter : INoiseFilter
    {
        private readonly NoiseSettings.SimpleNoiseSettings _noiseSettings;
        private readonly global::Noise _noise = new global::Noise();

        public SimpleNoiseFilter(NoiseSettings.SimpleNoiseSettings noiseSettings)
        {
            _noiseSettings = noiseSettings;
        }

        public float Evaluate(Vector3 point)
        {
            float noiseValue = 0;
            float frequency = _noiseSettings.baseRoughness;
            float amplitude = 1;

            for (int i = 0; i < _noiseSettings.numLayers; i++)
            {
                float v = _noise.Evaluate(point * frequency + _noiseSettings.centre);
                noiseValue += (v + 1) * 0.5f * amplitude;

                frequency *= _noiseSettings.roughness;
                amplitude *= _noiseSettings.persistance;
            }

            noiseValue = noiseValue - _noiseSettings.minValue; 
        
            return noiseValue * _noiseSettings.strength;
        }
    }
}